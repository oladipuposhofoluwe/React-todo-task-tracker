{"ast":null,"code":"var _jsxFileName = \"/Users/decagon/todo-task-tracker/src/App.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect } from 'react';\nimport { BrowserRouter as Router, Route } from 'react-router';\nimport Header from \"./components/Header\";\nimport Footer from \"./components/Footer\";\nimport Tasks from './components/Tasks';\nimport AddTask from './components/AddTask';\nimport About from './components/About';\nimport { router } from 'json-server';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst App = () => {\n  _s();\n\n  const [showAddTask, setShowAddTask] = useState(false);\n  const [tasks, setTasks] = useState([]);\n  useEffect(() => {\n    const getTasks = async () => {\n      const taskFromServer = await fetchTasks();\n      setTasks(taskFromServer);\n    };\n\n    getTasks();\n  }, []); // Fetch task\n\n  const fetchTasks = async () => {\n    const res = await fetch('http://localhost:5000/tasks');\n    const data = await res.json();\n    return data;\n  }; //Add task to the mocked Data base 'POST METHOD'\n\n\n  const addTask = async task => {\n    const res = await fetch(`http://localhost:5000/tasks`, {\n      method: 'POST',\n      headers: {\n        'Content-type': 'application/json'\n      },\n      body: JSON.stringify(task)\n    });\n    const data = await res.json();\n    setTasks([...tasks, data]); // const id = Math.floor(Math.random() * 10000) + 1\n    // const newTask = { id, ...task }\n    // setTasks([...tasks, newTask])\n  }; // Update task\n\n\n  const fetchTask = async id => {\n    const res = await fetch(`http://localhost:5000/tasks/${id}`);\n    const data = await res.json();\n    return data;\n  }; // function to delete task from the mocked Data Bse \"Delete method\"\n\n\n  const deleteTask = async id => {\n    await fetch(`http://localhost:5000/tasks/${id}`, {\n      method: 'DELETE'\n    });\n    setTasks(tasks.filter(task => task.id !== id));\n  }; // function to toggle reminder\n\n\n  const toggleReminder = async id => {\n    const taskToToggle = await fetchTask(id);\n    const updateTask = { ...taskToToggle,\n      reminder: !taskToToggle.reminder\n    };\n    const res = await fetch(`http://localhost:5000/tasks/${id}`, {\n      method: 'PUT',\n      headers: {\n        'Content-type': 'application/json'\n      },\n      body: JSON.stringify(updateTask)\n    });\n    const data = await res.json();\n    setTasks(tasks.map(task => task.id === id ? { ...task,\n      reminder: data.reminder\n    } : task));\n  };\n\n  return /*#__PURE__*/_jsxDEV(Router, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(Header, {\n        onAdd: () => setShowAddTask(!showAddTask),\n        showAdd: showAddTask\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 7\n      }, this), showAddTask && /*#__PURE__*/_jsxDEV(AddTask, {\n        onAdd: addTask\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 23\n      }, this), tasks.length > 0 ? /*#__PURE__*/_jsxDEV(Tasks, {\n        tasks: tasks,\n        onDelete: deleteTask,\n        onToggle: toggleReminder,\n        onAdd: addTask\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 9\n      }, this) : 'No Todo Task available to show', /*#__PURE__*/_jsxDEV(Route, {\n        path: \"/about\",\n        component: About\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Footer, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 5\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 101,\n    columnNumber: 5\n  }, this);\n};\n\n_s(App, \"pA4snfDjny2P+O1a+6NjXQ6HzBU=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/decagon/todo-task-tracker/src/App.js"],"names":["useState","useEffect","BrowserRouter","Router","Route","Header","Footer","Tasks","AddTask","About","router","App","showAddTask","setShowAddTask","tasks","setTasks","getTasks","taskFromServer","fetchTasks","res","fetch","data","json","addTask","task","method","headers","body","JSON","stringify","fetchTask","id","deleteTask","filter","toggleReminder","taskToToggle","updateTask","reminder","map","length"],"mappings":"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","sourcesContent":["import { useState, useEffect } from 'react';\nimport {BrowserRouter as Router, Route} from 'react-router'\nimport Header from \"./components/Header\";\nimport Footer from \"./components/Footer\";\nimport Tasks from './components/Tasks';\nimport AddTask from './components/AddTask';\nimport About from './components/About';\nimport { router } from 'json-server';\n\n\n\n\n\nconst App = () => {\n\n  const[showAddTask, setShowAddTask] = useState(false)\n\n  const [tasks, setTasks] = useState([])\n\n  useEffect(() => {\n    const getTasks = async () => {\n      const taskFromServer = await fetchTasks()\n      setTasks(taskFromServer)\n    }\n    \n    getTasks()\n  }, [])\n\n\n  // Fetch task\n  const fetchTasks = async() => {\n    const res = await fetch('http://localhost:5000/tasks')\n  const data = await res.json()\n\n    return data\n  }\n\n\n//Add task to the mocked Data base 'POST METHOD'\n  const addTask = async (task) => {\n    const res = await fetch(`http://localhost:5000/tasks`, {\n      method: 'POST',\n      headers: {\n        'Content-type': 'application/json'\n      },\n      body: JSON.stringify(task)\n    })\n      \n    const data = await res.json();\n    \n    setTasks([...tasks, data])\n\n    // const id = Math.floor(Math.random() * 10000) + 1\n    // const newTask = { id, ...task }\n    // setTasks([...tasks, newTask])\n\n  }\n\n\n    // Update task\n    const fetchTask = async(id) => {\n      const res = await fetch(`http://localhost:5000/tasks/${id}`)\n    const data = await res.json()\n  \n      return data\n    }\n\n  \n// function to delete task from the mocked Data Bse \"Delete method\"\n  const deleteTask = async (id) => {\n    await fetch(`http://localhost:5000/tasks/${id}`, {\n      method: 'DELETE'\n    })\n    setTasks(tasks.filter((task)=> task.id !== id))\n  }\n\n  // function to toggle reminder\n  const toggleReminder = async (id) => {\n    const taskToToggle = await fetchTask(id);\n    const updateTask = { ...taskToToggle, reminder: !taskToToggle.reminder }\n    \n    const res = await fetch(`http://localhost:5000/tasks/${id}`, {\n      method: 'PUT',\n      headers: {\n        'Content-type': 'application/json'\n      },\n      body: JSON.stringify(updateTask)\n    })\n\n    const data = await res.json();\n      \n\n    setTasks(tasks.map((task) =>\n      task.id === id ? {...task, reminder:\n          data.reminder} : task\n    )\n    )\n  }\n\n  return (\n    <Router>\n    <div className=\"container\">\n      <Header onAdd={() => setShowAddTask(!showAddTask)} showAdd={showAddTask}/>\n      {showAddTask && <AddTask onAdd={addTask}/>}\n      {tasks.length > 0 ? (\n        <Tasks\n          tasks={tasks}\n          onDelete={deleteTask}\n          onToggle={toggleReminder}\n          onAdd={addTask}\n          />\n        ) : ('No Todo Task available to show')}\n        <Route path='/about' component={About} />\n        <Footer />\n      </div>\n      </Router>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}