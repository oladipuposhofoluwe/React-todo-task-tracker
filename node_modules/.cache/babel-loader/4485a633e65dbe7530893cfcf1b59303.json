{"ast":null,"code":"var _jsxFileName = \"/Users/decagon/todo-task-tracker/src/App.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect } from 'react';\nimport Header from \"./components/Header\";\nimport Tasks from './components/Tasks';\nimport AddTask from './components/AddTask';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst App = () => {\n  _s();\n\n  const [showAddTask, setShowAddTask] = useState(false);\n  const [tasks, setTasks] = useState([]);\n  useEffect(() => {\n    const getTasks = async () => {\n      const taskFromServer = await fetchTasks();\n      setTasks(taskFromServer);\n    };\n\n    getTasks();\n  }, []); // Fetch task\n\n  const fetchTasks = async () => {\n    const res = await fetch('http://localhost:5000/tasks');\n    const data = await res.json();\n    return data;\n  }; //Add task\n\n\n  const addTask = async task => {\n    const res = await fetch(`http://localhost:5000/tasks`, {\n      method: 'POST',\n      headers: {\n        'Content-type': 'application/json'\n      },\n      body: JSON.stringify(task)\n    });\n    const data = await res.json();\n    setTasks([...tasks, data]); // const id = Math.floor(Math.random() * 10000) + 1\n    // const newTask = { id, ...task }\n    // setTasks([...tasks, newTask])\n  }; // function to delete task\n\n\n  const deleteTask = async id => {\n    await fetch(`http://localhost:5000/tasks/${id}`, {\n      method: 'DELETE'\n    });\n    setTasks(tasks.filter(task => task.id !== id));\n  }; // function to toggle reminder\n\n\n  const toggleReminder = id => {\n    setTasks(tasks.map(task => task.id === id ? { ...task,\n      reminder: !task.reminder\n    } : task));\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(Header, {\n      onAdd: () => setShowAddTask(!showAddTask),\n      showAdd: showAddTask\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this), showAddTask && /*#__PURE__*/_jsxDEV(AddTask, {\n      onAdd: addTask\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 23\n    }, this), tasks.length > 0 ? /*#__PURE__*/_jsxDEV(Tasks, {\n      tasks: tasks,\n      onDelete: deleteTask,\n      onToggle: toggleReminder,\n      onAdd: addTask\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 9\n    }, this) : 'No Todo Task available to show']\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 72,\n    columnNumber: 5\n  }, this);\n};\n\n_s(App, \"pA4snfDjny2P+O1a+6NjXQ6HzBU=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/decagon/todo-task-tracker/src/App.js"],"names":["useState","useEffect","Header","Tasks","AddTask","App","showAddTask","setShowAddTask","tasks","setTasks","getTasks","taskFromServer","fetchTasks","res","fetch","data","json","addTask","task","method","headers","body","JSON","stringify","deleteTask","id","filter","toggleReminder","map","reminder","length"],"mappings":"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","sourcesContent":["import { useState, useEffect } from 'react';\nimport Header from \"./components/Header\";\nimport Tasks from './components/Tasks';\nimport AddTask from './components/AddTask';\n\n\n\n\nconst App = () => {\n\n  const[showAddTask, setShowAddTask] = useState(false)\n\n  const [tasks, setTasks] = useState([])\n\n  useEffect(() => {\n    const getTasks = async () => {\n      const taskFromServer = await fetchTasks()\n      setTasks(taskFromServer)\n    }\n    \n    getTasks()\n  }, [])\n\n\n  // Fetch task\n  const fetchTasks = async() => {\n    const res = await fetch('http://localhost:5000/tasks')\n  const data = await res.json()\n\n    return data\n  }\n\n\n\n//Add task\n  const addTask = async (task) => {\n    const res = await fetch(`http://localhost:5000/tasks`, {\n      method: 'POST',\n      headers: {\n        'Content-type': 'application/json'\n      },\n      body: JSON.stringify(task)\n    })\n      \n    const data = await res.json();\n    \n    setTasks([...tasks, data])\n\n    // const id = Math.floor(Math.random() * 10000) + 1\n    // const newTask = { id, ...task }\n    // setTasks([...tasks, newTask])\n\n  }\n\n  \n// function to delete task\n  const deleteTask = async (id) => {\n    await fetch(`http://localhost:5000/tasks/${id}`, {\n      method: 'DELETE'\n    })\n    setTasks(tasks.filter((task)=> task.id !== id))\n  }\n\n  // function to toggle reminder\n  const toggleReminder=(id)=>{\n    setTasks(tasks.map((task) => task.id === id ? { ...task, reminder: !task.reminder } : task\n    )\n    )\n  }\n\n  return (\n    <div className=\"container\">\n      <Header onAdd={() => setShowAddTask(!showAddTask)} showAdd={showAddTask}/>\n      {showAddTask && <AddTask onAdd={addTask}/>}\n      {tasks.length > 0 ? (\n        <Tasks\n          tasks={tasks}\n          onDelete={deleteTask}\n          onToggle={toggleReminder}\n          onAdd={addTask}\n          />\n      ) : ('No Todo Task available to show')}\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}